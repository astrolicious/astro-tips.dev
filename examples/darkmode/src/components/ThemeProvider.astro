---
type Props = {
  "default-theme"?: "auto" | "dark" | "light";
};

const { "default-theme": defaultTheme = "auto" } = Astro.props;
---

<theme-manager data-default-theme={defaultTheme} />
<script is:inline>
class ThemeManager extends HTMLElement {
  connectedCallback() {
    this.initThemeManagement(this.dataset.defaultTheme || 'auto');
  }

  initThemeManagement(defaultTheme) {
    window.theme ??= (() => {
      const storageKey = "theme";
      const store = typeof localStorage !== "undefined" ? localStorage : { getItem: () => null, setItem: () => {}, };

      const mediaMatcher = window.matchMedia("(prefers-color-scheme: light)");
      let systemTheme = mediaMatcher.matches ? "light" : "dark";
      mediaMatcher.addEventListener("change", (event) => {
        systemTheme = event.matches ? "light" : "dark";
        if (theme.getTheme() === "auto") {
          applyTheme(systemTheme);
        }
      });

      function applyTheme(theme) {
        document.documentElement.dataset.theme = theme;
        document.dispatchEvent(new CustomEvent("theme-changed", { detail: { theme } }));
      }

      function setTheme(theme = defaultTheme) {
        store.setItem(storageKey, theme);
        applyTheme(theme === "auto" ? systemTheme : theme);
      }

      function getTheme() {
        return store.getItem(storageKey) || defaultTheme;
      }

      return { setTheme, getTheme };
    })();

    theme.setTheme(theme.getTheme());
  }
}

customElements.define('theme-manager', ThemeManager);
</script>
<!-- <script is:inline data-default-theme={defaultTheme} data-astro-rerun>
  window.theme ??= (() => {
    const defaultTheme = document.currentScript?.dataset.defaultTheme ?? "auto";

    const storageKey = "theme";
    const store =
      typeof localStorage !== "undefined"
        ? localStorage
        : {
            getItem: () => null,
            setItem: () => {},
          };

    const mediaMatcher = window.matchMedia("(prefers-color-scheme: light)");

    let systemTheme = mediaMatcher.matches ? "light" : "dark";
    mediaMatcher.addEventListener("change", (event) => {
      systemTheme = mediaMatcher.matches ? "light" : "dark";

      if (theme.getTheme() === "auto") {
        applyTheme(systemTheme);
      }
    });

    function applyTheme(theme) {
      document.documentElement.dataset.theme = theme;

      const element = new CustomEvent("theme-changed", {
        detail: { theme },
      });

      document.dispatchEvent(element);
    }

    function setTheme(theme = defaultTheme) {
      store.setItem(storageKey, theme);

      applyTheme(theme === "auto" ? systemTheme : theme);
    }

    function getTheme() {
      return store.getItem(storageKey) || defaultTheme;
    }

    return {
      setTheme,
      getTheme,
    };
  })();

  theme.setTheme(theme.getTheme());
</script> -->
