---
/* This button will switch between the default theme and the opposite of that
 *
 * If the default theme is auto it will toggle between auto and the opposite of the systemTheme
 *
 * If the default theme is not auto it will never enter auto mode
 */
---

<button is="theme-toggle-button"></button>
<style>
  button[is="theme-toggle-button"] {
    background-color: transparent;
    border: none;
    color: inherit;
    width: 2.5rem;
    height: auto;
    cursor: pointer;
  }
</style>
<noscript>
  <style>
    button[is="theme-toggle-button"] {
      visibility: hidden;
    }
  </style>
</noscript>
<script is:inline>
  if (!customElements.get("theme-toggle-button")) {
    class ThemeToggleButton extends HTMLButtonElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.render();
        this.bindEvents();
        this.updateAriaLabel();
      }

      render() {
        this.innerHTML = `
          <svg fill="none" viewBox="0 0 24 24" stroke="currentColor" id="moon" aria-hidden="true">
            <path
              d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"
            ></path>
          </svg>
          <svg fill="none" viewBox="0 0 24 24" stroke="currentColor" id="sun" aria-hidden="true">
            <path
              d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"
            ></path>
          </svg>
        `;
        this.updateThemeIcon();
      }

      bindEvents() {
        this.addEventListener("click", () => this.toggleTheme());
        document.addEventListener("theme-changed", () => {
          this.updateThemeIcon();
          this.updateAriaLabel();
        });
      }

      toggleTheme() {
        const currentTheme = theme.getTheme();
        const defaultTheme = theme.getDefaultTheme();
        const systemTheme = theme.getSystemTheme();
        let newTheme;

        if (defaultTheme === "auto") {
          if (currentTheme === "auto" || currentTheme === systemTheme) {
            newTheme = systemTheme === "dark" ? "light" : "dark";
          } else {
            newTheme = "auto";
          }
        } else {
          if (currentTheme === defaultTheme) {
            newTheme = defaultTheme === "dark" ? "light" : "dark";
          } else if (currentTheme === "auto") {
            newTheme = systemTheme === "dark" ? "light" : "dark";
          } else {
            newTheme = defaultTheme;
          }
        }

        theme.setTheme(newTheme);
        this.updateThemeIcon();
        this.updateAriaLabel();
      }

      updateThemeIcon() {
        const currentTheme = theme.getTheme();
        const systemTheme = theme.getSystemTheme();
        const sunIcon = this.querySelector("#sun");
        const moonIcon = this.querySelector("#moon");

        sunIcon.style.display =
          currentTheme === "dark" ||
          (currentTheme === "auto" && systemTheme === "dark")
            ? "block"
            : "none";
        moonIcon.style.display =
          currentTheme === "light" ||
          (currentTheme === "auto" && systemTheme === "light")
            ? "block"
            : "none";
      }

      updateAriaLabel() {
        const currentTheme = theme.getTheme();
        const systemTheme = theme.getSystemTheme();
        const newMode =
          currentTheme === "dark" ||
          (currentTheme === "auto" && systemTheme === "dark")
            ? "light"
            : "dark";
        this.ariaLabel = `Theme toggle button: click to activate ${newMode} mode`;
      }
    }

    customElements.define("theme-toggle-button", ThemeToggleButton, {
      extends: "button",
    });
  }
</script>
