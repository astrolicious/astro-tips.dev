---
type Props = {
  "defaultTheme"?: "auto" | "dark" | "light";
};

const { defaultTheme = "auto" } = Astro.props;
---

<theme-manager data-default-theme={defaultTheme}></theme-manager>
<script is:inline>
  if (!customElements.get("theme-manager")) {
    class ThemeManager extends HTMLElement {
      connectedCallback() {
        this.initThemeManagement(this.dataset.defaultTheme);
      }

      initThemeManagement(defaultTheme) {
        window.theme = (() => {
          const storageKey = "theme";
          const store =
            typeof localStorage !== "undefined"
              ? localStorage
              : { getItem: () => null, setItem: () => {} };

          const mediaMatcher = window.matchMedia(
            "(prefers-color-scheme: light)"
          );
          let systemTheme = mediaMatcher.matches ? "light" : "dark";
          mediaMatcher.addEventListener("change", (event) => {
            systemTheme = event.matches ? "light" : "dark";
            applyTheme(theme.getTheme());
          });

          function applyTheme(theme) {
            document.documentElement.dataset.theme =
              theme === "auto" ? systemTheme : theme;
            document.dispatchEvent(
              new CustomEvent("theme-changed", {
                detail: { theme, systemTheme },
              })
            );
          }

          function setTheme(theme = defaultTheme) {
            store.setItem(storageKey, theme);
            applyTheme(theme);
          }

          function getTheme() {
            return store.getItem(storageKey) || defaultTheme;
          }

          function getSystemTheme() {
            return systemTheme;
          }

          function getDefaultTheme() {
            return defaultTheme;
          }

          return { setTheme, getTheme, getSystemTheme, getDefaultTheme };
        })();

        theme.setTheme(theme.getTheme());
      }
    }
    customElements.define("theme-manager", ThemeManager);
  }
</script>
